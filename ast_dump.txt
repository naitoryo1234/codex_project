Module(
  body=[
    Import(
      names=[
        alias(name='math')]),
    ImportFrom(
      module='typing',
      names=[
        alias(name='Dict'),
        alias(name='List')],
      level=0),
    Import(
      names=[
        alias(name='streamlit', asname='st')]),
    Import(
      names=[
        alias(name='pandas', asname='pd')]),
    Import(
      names=[
        alias(name='altair', asname='alt')]),
    AnnAssign(
      target=Name(id='SETTINGS', ctx=Store()),
      annotation=Subscript(
        value=Name(id='Dict', ctx=Load()),
        slice=Tuple(
          elts=[
            Name(id='str', ctx=Load()),
            Name(id='float', ctx=Load())],
          ctx=Load()),
        ctx=Load()),
      value=Dict(
        keys=[
          Constant(value='1'),
          Constant(value='2'),
          Constant(value='4'),
          Constant(value='5'),
          Constant(value='6')],
        values=[
          BinOp(
            left=Constant(value=1),
            op=Div(),
            right=Constant(value=38.15)),
          BinOp(
            left=Constant(value=1),
            op=Div(),
            right=Constant(value=36.86)),
          BinOp(
            left=Constant(value=1),
            op=Div(),
            right=Constant(value=30.27)),
          BinOp(
            left=Constant(value=1),
            op=Div(),
            right=Constant(value=24.51)),
          BinOp(
            left=Constant(value=1),
            op=Div(),
            right=Constant(value=22.53))]),
      simple=1),
    AnnAssign(
      target=Name(id='SETTING_KEYS', ctx=Store()),
      annotation=Subscript(
        value=Name(id='List', ctx=Load()),
        slice=Name(id='str', ctx=Load()),
        ctx=Load()),
      value=Call(
        func=Name(id='list', ctx=Load()),
        args=[
          Call(
            func=Attribute(
              value=Name(id='SETTINGS', ctx=Load()),
              attr='keys',
              ctx=Load()))]),
      simple=1),
    FunctionDef(
      name='calculate_likelihood',
      args=arguments(
        args=[
          arg(
            arg='num_spins',
            annotation=Name(id='int', ctx=Load())),
          arg(
            arg='num_hits',
            annotation=Name(id='int', ctx=Load())),
          arg(
            arg='p',
            annotation=Name(id='float', ctx=Load()))]),
      body=[
        Expr(
          value=Constant(value='二項分布の尤度 P(K=k | N=n, p)。大きな数でも安定するよう対数を使う。')),
        If(
          test=BoolOp(
            op=Or(),
            values=[
              Compare(
                left=Name(id='p', ctx=Load()),
                ops=[
                  LtE()],
                comparators=[
                  Constant(value=0.0)]),
              Compare(
                left=Name(id='p', ctx=Load()),
                ops=[
                  GtE()],
                comparators=[
                  Constant(value=1.0)]),
              Compare(
                left=Name(id='num_spins', ctx=Load()),
                ops=[
                  LtE()],
                comparators=[
                  Constant(value=0)]),
              Compare(
                left=Name(id='num_hits', ctx=Load()),
                ops=[
                  Lt()],
                comparators=[
                  Constant(value=0)]),
              Compare(
                left=Name(id='num_hits', ctx=Load()),
                ops=[
                  Gt()],
                comparators=[
                  Name(id='num_spins', ctx=Load())])]),
          body=[
            Return(
              value=Constant(value=0.0))]),
        Assign(
          targets=[
            Name(id='log_nCk', ctx=Store())],
          value=BinOp(
            left=BinOp(
              left=Call(
                func=Attribute(
                  value=Name(id='math', ctx=Load()),
                  attr='lgamma',
                  ctx=Load()),
                args=[
                  BinOp(
                    left=Name(id='num_spins', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1))]),
              op=Sub(),
              right=Call(
                func=Attribute(
                  value=Name(id='math', ctx=Load()),
                  attr='lgamma',
                  ctx=Load()),
                args=[
                  BinOp(
                    left=Name(id='num_hits', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1))])),
            op=Sub(),
            right=Call(
              func=Attribute(
                value=Name(id='math', ctx=Load()),
                attr='lgamma',
                ctx=Load()),
              args=[
                BinOp(
                  left=BinOp(
                    left=Name(id='num_spins', ctx=Load()),
                    op=Sub(),
                    right=Name(id='num_hits', ctx=Load())),
                  op=Add(),
                  right=Constant(value=1))]))),
        Assign(
          targets=[
            Name(id='log_likelihood', ctx=Store())],
          value=BinOp(
            left=BinOp(
              left=Name(id='log_nCk', ctx=Load()),
              op=Add(),
              right=BinOp(
                left=Name(id='num_hits', ctx=Load()),
                op=Mult(),
                right=Call(
                  func=Attribute(
                    value=Name(id='math', ctx=Load()),
                    attr='log',
                    ctx=Load()),
                  args=[
                    Name(id='p', ctx=Load())]))),
            op=Add(),
            right=BinOp(
              left=BinOp(
                left=Name(id='num_spins', ctx=Load()),
                op=Sub(),
                right=Name(id='num_hits', ctx=Load())),
              op=Mult(),
              right=Call(
                func=Attribute(
                  value=Name(id='math', ctx=Load()),
                  attr='log',
                  ctx=Load()),
                args=[
                  BinOp(
                    left=Constant(value=1.0),
                    op=Sub(),
                    right=Name(id='p', ctx=Load()))])))),
        Return(
          value=Call(
            func=Attribute(
              value=Name(id='math', ctx=Load()),
              attr='exp',
              ctx=Load()),
            args=[
              Name(id='log_likelihood', ctx=Load())]))],
      returns=Name(id='float', ctx=Load())),
    FunctionDef(
      name='normalize',
      args=arguments(
        args=[
          arg(
            arg='priors',
            annotation=Subscript(
              value=Name(id='Dict', ctx=Load()),
              slice=Tuple(
                elts=[
                  Name(id='str', ctx=Load()),
                  Name(id='float', ctx=Load())],
                ctx=Load()),
              ctx=Load()))]),
      body=[
        Assign(
          targets=[
            Name(id='total', ctx=Store())],
          value=Call(
            func=Name(id='sum', ctx=Load()),
            args=[
              GeneratorExp(
                elt=Call(
                  func=Name(id='max', ctx=Load()),
                  args=[
                    Constant(value=0.0),
                    Call(
                      func=Attribute(
                        value=Name(id='priors', ctx=Load()),
                        attr='get',
                        ctx=Load()),
                      args=[
                        Name(id='k', ctx=Load()),
                        Constant(value=0.0)])]),
                generators=[
                  comprehension(
                    target=Name(id='k', ctx=Store()),
                    iter=Name(id='SETTING_KEYS', ctx=Load()),
                    is_async=0)])])),
        If(
          test=Compare(
            left=Name(id='total', ctx=Load()),
            ops=[
              LtE()],
            comparators=[
              Constant(value=0.0)]),
          body=[
            Assign(
              targets=[
                Name(id='uniform', ctx=Store())],
              value=BinOp(
                left=Constant(value=1.0),
                op=Div(),
                right=Call(
                  func=Name(id='len', ctx=Load()),
                  args=[
                    Name(id='SETTING_KEYS', ctx=Load())]))),
            Return(
              value=DictComp(
                key=Name(id='k', ctx=Load()),
                value=Name(id='uniform', ctx=Load()),
                generators=[
                  comprehension(
                    target=Name(id='k', ctx=Store()),
                    iter=Name(id='SETTING_KEYS', ctx=Load()),
                    is_async=0)]))]),
        Return(
          value=DictComp(
            key=Name(id='k', ctx=Load()),
            value=BinOp(
              left=Call(
                func=Name(id='max', ctx=Load()),
                args=[
                  Constant(value=0.0),
                  Call(
                    func=Attribute(
                      value=Name(id='priors', ctx=Load()),
                      attr='get',
                      ctx=Load()),
                    args=[
                      Name(id='k', ctx=Load()),
                      Constant(value=0.0)])]),
              op=Div(),
              right=Name(id='total', ctx=Load())),
            generators=[
              comprehension(
                target=Name(id='k', ctx=Store()),
                iter=Name(id='SETTING_KEYS', ctx=Load()),
                is_async=0)]))],
      returns=Subscript(
        value=Name(id='Dict', ctx=Load()),
        slice=Tuple(
          elts=[
            Name(id='str', ctx=Load()),
            Name(id='float', ctx=Load())],
          ctx=Load()),
        ctx=Load())),
    FunctionDef(
      name='compute_posteriors',
      args=arguments(
        args=[
          arg(
            arg='num_spins',
            annotation=Name(id='int', ctx=Load())),
          arg(
            arg='num_hits',
            annotation=Name(id='int', ctx=Load())),
          arg(
            arg='priors',
            annotation=Subscript(
              value=Name(id='Dict', ctx=Load()),
              slice=Tuple(
                elts=[
                  Name(id='str', ctx=Load()),
                  Name(id='float', ctx=Load())],
                ctx=Load()),
              ctx=Load()))]),
      body=[
        Assign(
          targets=[
            Name(id='priors', ctx=Store())],
          value=Call(
            func=Name(id='normalize', ctx=Load()),
            args=[
              Name(id='priors', ctx=Load())])),
        AnnAssign(
          target=Name(id='posterior_numerators', ctx=Store()),
          annotation=Subscript(
            value=Name(id='Dict', ctx=Load()),
            slice=Tuple(
              elts=[
                Name(id='str', ctx=Load()),
                Name(id='float', ctx=Load())],
              ctx=Load()),
            ctx=Load()),
          value=Dict(),
          simple=1),
        Assign(
          targets=[
            Name(id='marginal_likelihood', ctx=Store())],
          value=Constant(value=0.0)),
        For(
          target=Name(id='k', ctx=Store()),
          iter=Name(id='SETTING_KEYS', ctx=Load()),
          body=[
            Assign(
              targets=[
                Name(id='p', ctx=Store())],
              value=Subscript(
                value=Name(id='SETTINGS', ctx=Load()),
                slice=Name(id='k', ctx=Load()),
                ctx=Load())),
            Assign(
              targets=[
                Name(id='prior', ctx=Store())],
              value=Call(
                func=Attribute(
                  value=Name(id='priors', ctx=Load()),
                  attr='get',
                  ctx=Load()),
                args=[
                  Name(id='k', ctx=Load()),
                  Constant(value=0.0)])),
            Assign(
              targets=[
                Name(id='likelihood', ctx=Store())],
              value=IfExp(
                test=Compare(
                  left=Name(id='prior', ctx=Load()),
                  ops=[
                    Gt()],
                  comparators=[
                    Constant(value=0.0)]),
                body=Call(
                  func=Name(id='calculate_likelihood', ctx=Load()),
                  args=[
                    Name(id='num_spins', ctx=Load()),
                    Name(id='num_hits', ctx=Load()),
                    Name(id='p', ctx=Load())]),
                orelse=Constant(value=0.0))),
            Assign(
              targets=[
                Name(id='numerator', ctx=Store())],
              value=BinOp(
                left=Name(id='likelihood', ctx=Load()),
                op=Mult(),
                right=Name(id='prior', ctx=Load()))),
            Assign(
              targets=[
                Subscript(
                  value=Name(id='posterior_numerators', ctx=Load()),
                  slice=Name(id='k', ctx=Load()),
                  ctx=Store())],
              value=Name(id='numerator', ctx=Load())),
            AugAssign(
              target=Name(id='marginal_likelihood', ctx=Store()),
              op=Add(),
              value=Name(id='numerator', ctx=Load()))]),
        If(
          test=Compare(
            left=Name(id='marginal_likelihood', ctx=Load()),
            ops=[
              Gt()],
            comparators=[
              Constant(value=0.0)]),
          body=[
            Return(
              value=DictComp(
                key=Name(id='k', ctx=Load()),
                value=BinOp(
                  left=Subscript(
                    value=Name(id='posterior_numerators', ctx=Load()),
                    slice=Name(id='k', ctx=Load()),
                    ctx=Load()),
                  op=Div(),
                  right=Name(id='marginal_likelihood', ctx=Load())),
                generators=[
                  comprehension(
                    target=Name(id='k', ctx=Store()),
                    iter=Name(id='SETTING_KEYS', ctx=Load()),
                    is_async=0)]))]),
        Return(
          value=Name(id='priors', ctx=Load()))],
      returns=Subscript(
        value=Name(id='Dict', ctx=Load()),
        slice=Tuple(
          elts=[
            Name(id='str', ctx=Load()),
            Name(id='float', ctx=Load())],
          ctx=Load()),
        ctx=Load())),
    Expr(
      value=Call(
        func=Attribute(
          value=Name(id='st', ctx=Load()),
          attr='set_page_config',
          ctx=Load()),
        keywords=[
          keyword(
            arg='page_title',
            value=Constant(value='設定推定ツール')),
          keyword(
            arg='page_icon',
            value=Constant(value='🎰')),
          keyword(
            arg='layout',
            value=Constant(value='wide')),
          keyword(
            arg='initial_sidebar_state',
            value=Constant(value='collapsed'))])),
    Expr(
      value=Call(
        func=Attribute(
          value=Name(id='st', ctx=Load()),
          attr='markdown',
          ctx=Load()),
        args=[
          Constant(value='\n    <style>\n      .block-container { padding-top: calc(1.2rem + env(safe-area-inset-top)); padding-bottom: 2rem; max-width: 980px; }\n      /* タイトル少し小さく */\n      h1 { font-size: 1.6rem !important; }\n      label, .stMarkdown p { font-size: 0.95rem; }\n      .stNumberInput input { font-size: 1rem; }\n      /* マイクロボタン行: 2列で横並び、小さめボタン */\n      .micro-row { margin-top: 0.25rem; }\n      .micro-row [data-testid="stHorizontalBlock"] { display: flex !important; flex-wrap: nowrap !important; }\n      .micro-row [data-testid="column"] { width: 50% !important; padding-right: 0.25rem; }\n      .micro-row [data-testid="column"]:last-child { padding-right: 0; padding-left: 0.25rem; }\n      .micro-row .stButton > button { padding: 0.14rem 0.46rem; font-size: 0.82rem; min-width: 60px; }\n      /* metricの値を省略せず折り返し可にする */\n      div[data-testid="stMetricValue"] { white-space: normal !important; overflow: visible !important; text-overflow: clip !important; line-height: 1.2; }\n      @media (max-width: 420px) {\n        .block-container { padding-left: 0.6rem; padding-right: 0.6rem; }\n        label, .stMarkdown p { font-size: 0.9rem; }\n        .micro-row .stButton > button { min-width: 56px; }\n        div[data-testid="stMetricValue"] { font-size: 1rem !important; }\n      }\n    </style>\n    ')],
        keywords=[
          keyword(
            arg='unsafe_allow_html',
            value=Constant(value=True))])),
    Expr(
      value=Call(
        func=Attribute(
          value=Name(id='st', ctx=Load()),
          attr='markdown',
          ctx=Load()),
        args=[
          Constant(value='\n    <style>\n    @media (max-width: 640px) {\n      div[data-testid="stHorizontalBlock"] { flex-direction: row !important; flex-wrap: nowrap !important; }\n      div[data-testid="stHorizontalBlock"] > div { width: 50% !important; min-width: 0 !important; flex: 0 0 50% !important; }\n      div[data-testid="column"] { width: 50% !important; min-width: 0 !important; flex: 0 0 50% !important; }\n      div[data-testid="stNumberInput"] { min-width: 0 !important; }\n    }\n    </style>\n    ')],
        keywords=[
          keyword(
            arg='unsafe_allow_html',
            value=Constant(value=True))])),
    Expr(
      value=Call(
        func=Attribute(
          value=Name(id='st', ctx=Load()),
          attr='title',
          ctx=Load()),
        args=[
          Constant(value='モンキーターンV判別ツール')])),
    If(
      test=Compare(
        left=Constant(value='n'),
        ops=[
          NotIn()],
        comparators=[
          Attribute(
            value=Name(id='st', ctx=Load()),
            attr='session_state',
            ctx=Load())]),
      body=[
        Assign(
          targets=[
            Attribute(
              value=Attribute(
                value=Name(id='st', ctx=Load()),
                attr='session_state',
                ctx=Load()),
              attr='n',
              ctx=Store())],
          value=Constant(value=1000))]),
    If(
      test=Compare(
        left=Constant(value='k'),
        ops=[
          NotIn()],
        comparators=[
          Attribute(
            value=Name(id='st', ctx=Load()),
            attr='session_state',
            ctx=Load())]),
      body=[
        Assign(
          targets=[
            Attribute(
              value=Attribute(
                value=Name(id='st', ctx=Load()),
                attr='session_state',
                ctx=Load()),
              attr='k',
              ctx=Store())],
          value=Constant(value=20))]),
    With(
      items=[
        withitem(
          context_expr=Call(
            func=Attribute(
              value=Name(id='st', ctx=Load()),
              attr='form',
              ctx=Load()),
            args=[
              Constant(value='inputs')],
            keywords=[
              keyword(
                arg='clear_on_submit',
                value=Constant(value=False))]))],
      body=[
        Expr(
          value=Call(
            func=Attribute(
              value=Name(id='st', ctx=Load()),
              attr='subheader',
              ctx=Load()),
            args=[
              Constant(value='入力')])),
        Assign(
          targets=[
            Tuple(
              elts=[
                Name(id='colN', ctx=Store()),
                Name(id='colK', ctx=Store())],
              ctx=Store())],
          value=Call(
            func=Attribute(
              value=Name(id='st', ctx=Load()),
              attr='columns',
              ctx=Load()),
            args=[
              Constant(value=2)],
            keywords=[
              keyword(
                arg='gap',
                value=Constant(value='small'))])),
        With(
          items=[
            withitem(
              context_expr=Name(id='colN', ctx=Load()))],
          body=[
            Assign(
              targets=[
                Name(id='n', ctx=Store())],
              value=Call(
                func=Attribute(
                  value=Name(id='st', ctx=Load()),
                  attr='number_input',
                  ctx=Load()),
                args=[
                  Constant(value='総回転数 N')],
                keywords=[
                  keyword(
                    arg='min_value',
                    value=Constant(value=0)),
                  keyword(
                    arg='value',
                    value=Call(
                      func=Name(id='int', ctx=Load()),
                      args=[
                        Attribute(
                          value=Attribute(
                            value=Name(id='st', ctx=Load()),
                            attr='session_state',
                            ctx=Load()),
                          attr='n',
                          ctx=Load())])),
                  keyword(
                    arg='step',
                    value=Constant(value=10)),
                  keyword(
                    arg='key',
                    value=Constant(value='n_input'))])),
            Expr(
              value=Call(
                func=Attribute(
                  value=Name(id='st', ctx=Load()),
                  attr='markdown',
                  ctx=Load()),
                args=[
                  Constant(value='<div class="micro-row">')],
                keywords=[
                  keyword(
                    arg='unsafe_allow_html',
                    value=Constant(value=True))])),
            Assign(
              targets=[
                Tuple(
                  elts=[
                    Name(id='n_col1', ctx=Store()),
                    Name(id='n_col2', ctx=Store())],
                  ctx=Store())],
              value=Call(
                func=Attribute(
                  value=Name(id='st', ctx=Load()),
                  attr='columns',
                  ctx=Load()),
                args=[
                  Constant(value=2)])),
            With(
              items=[
                withitem(
                  context_expr=Name(id='n_col1', ctx=Load()))],
              body=[
                If(
                  test=Call(
                    func=Attribute(
                      value=Name(id='st', ctx=Load()),
                      attr='form_submit_button',
                      ctx=Load()),
                    args=[
                      Constant(value='N -50')],
                    keywords=[
                      keyword(
                        arg='key',
                        value=Constant(value='n_minus'))]),
                  body=[
                    Assign(
                      targets=[
                        Attribute(
                          value=Attribute(
                            value=Name(id='st', ctx=Load()),
                            attr='session_state',
                            ctx=Load()),
                          attr='n',
                          ctx=Store())],
                      value=Call(
                        func=Name(id='max', ctx=Load()),
                        args=[
                          Constant(value=0),
                          BinOp(
                            left=Call(
                              func=Name(id='int', ctx=Load()),
                              args=[
                                Name(id='n', ctx=Load())]),
                            op=Sub(),
                            right=Constant(value=50))])),
                    Expr(
                      value=Call(
                        func=Attribute(
                          value=Name(id='st', ctx=Load()),
                          attr='rerun',
                          ctx=Load())))])]),
            With(
              items=[
                withitem(
                  context_expr=Name(id='n_col2', ctx=Load()))],
              body=[
                If(
                  test=Call(
                    func=Attribute(
                      value=Name(id='st', ctx=Load()),
                      attr='form_submit_button',
                      ctx=Load()),
                    args=[
                      Constant(value='N +50')],
                    keywords=[
                      keyword(
                        arg='key',
                        value=Constant(value='n_plus'))]),
                  body=[
                    Assign(
                      targets=[
                        Attribute(
                          value=Attribute(
                            value=Name(id='st', ctx=Load()),
                            attr='session_state',
                            ctx=Load()),
                          attr='n',
                          ctx=Store())],
                      value=BinOp(
                        left=Call(
                          func=Name(id='int', ctx=Load()),
                          args=[
                            Name(id='n', ctx=Load())]),
                        op=Add(),
                        right=Constant(value=50))),
                    Expr(
                      value=Call(
                        func=Attribute(
                          value=Name(id='st', ctx=Load()),
                          attr='rerun',
                          ctx=Load())))])]),
            Expr(
              value=Call(
                func=Attribute(
                  value=Name(id='st', ctx=Load()),
                  attr='markdown',
                  ctx=Load()),
                args=[
                  Constant(value='</div>')],
                keywords=[
                  keyword(
                    arg='unsafe_allow_html',
                    value=Constant(value=True))]))]),
        With(
          items=[
            withitem(
              context_expr=Name(id='colK', ctx=Load()))],
          body=[
            Assign(
              targets=[
                Name(id='k', ctx=Store())],
              value=Call(
                func=Attribute(
                  value=Name(id='st', ctx=Load()),
                  attr='number_input',
                  ctx=Load()),
                args=[
                  Constant(value='小役回数 k')],
                keywords=[
                  keyword(
                    arg='min_value',
                    value=Constant(value=0)),
                  keyword(
                    arg='value',
                    value=Call(
                      func=Name(id='int', ctx=Load()),
                      args=[
                        Attribute(
                          value=Attribute(
                            value=Name(id='st', ctx=Load()),
                            attr='session_state',
                            ctx=Load()),
                          attr='k',
                          ctx=Load())])),
                  keyword(
                    arg='step',
                    value=Constant(value=1)),
                  keyword(
                    arg='key',
                    value=Constant(value='k_input'))])),
            Expr(
              value=Call(
                func=Attribute(
                  value=Name(id='st', ctx=Load()),
                  attr='markdown',
                  ctx=Load()),
                args=[
                  Constant(value='<div class="micro-row">')],
                keywords=[
                  keyword(
                    arg='unsafe_allow_html',
                    value=Constant(value=True))])),
            Assign(
              targets=[
                Tuple(
                  elts=[
                    Name(id='k_col1', ctx=Store()),
                    Name(id='k_col2', ctx=Store())],
                  ctx=Store())],
              value=Call(
                func=Attribute(
                  value=Name(id='st', ctx=Load()),
                  attr='columns',
                  ctx=Load()),
                args=[
                  Constant(value=2)])),
            With(
              items=[
                withitem(
                  context_expr=Name(id='k_col1', ctx=Load()))],
              body=[
                If(
                  test=Call(
                    func=Attribute(
                      value=Name(id='st', ctx=Load()),
                      attr='form_submit_button',
                      ctx=Load()),
                    args=[
                      Constant(value='k -10')],
                    keywords=[
                      keyword(
                        arg='key',
                        value=Constant(value='k_minus'))]),
                  body=[
                    Assign(
                      targets=[
                        Attribute(
                          value=Attribute(
                            value=Name(id='st', ctx=Load()),
                            attr='session_state',
                            ctx=Load()),
                          attr='k',
                          ctx=Store())],
                      value=Call(
                        func=Name(id='max', ctx=Load()),
                        args=[
                          Constant(value=0),
                          BinOp(
                            left=Call(
                              func=Name(id='int', ctx=Load()),
                              args=[
                                Name(id='k', ctx=Load())]),
                            op=Sub(),
                            right=Constant(value=10))])),
                    Expr(
                      value=Call(
                        func=Attribute(
                          value=Name(id='st', ctx=Load()),
                          attr='rerun',
                          ctx=Load())))])]),
            With(
              items=[
                withitem(
                  context_expr=Name(id='k_col2', ctx=Load()))],
              body=[
                If(
                  test=Call(
                    func=Attribute(
                      value=Name(id='st', ctx=Load()),
                      attr='form_submit_button',
                      ctx=Load()),
                    args=[
                      Constant(value='k +10')],
                    keywords=[
                      keyword(
                        arg='key',
                        value=Constant(value='k_plus'))]),
                  body=[
                    Assign(
                      targets=[
                        Attribute(
                          value=Attribute(
                            value=Name(id='st', ctx=Load()),
                            attr='session_state',
                            ctx=Load()),
                          attr='k',
                          ctx=Store())],
                      value=BinOp(
                        left=Call(
                          func=Name(id='int', ctx=Load()),
                          args=[
                            Name(id='k', ctx=Load())]),
                        op=Add(),
                        right=Constant(value=10))),
                    Expr(
                      value=Call(
                        func=Attribute(
                          value=Name(id='st', ctx=Load()),
                          attr='rerun',
                          ctx=Load())))])]),
            Expr(
              value=Call(
                func=Attribute(
                  value=Name(id='st', ctx=Load()),
                  attr='markdown',
                  ctx=Load()),
                args=[
                  Constant(value='</div>')],
                keywords=[
                  keyword(
                    arg='unsafe_allow_html',
                    value=Constant(value=True))]))]),
        Expr(
          value=Call(
            func=Attribute(
              value=Name(id='st', ctx=Load()),
              attr='markdown',
              ctx=Load()),
            args=[
              Constant(value='事前確率（合計は自動正規化）')])),
        Assign(
          targets=[
            Name(id='prior_mode', ctx=Store())],
          value=Call(
            func=Attribute(
              value=Name(id='st', ctx=Load()),
              attr='radio',
              ctx=Load()),
            args=[
              Constant(value='事前の設定'),
              List(
                elts=[
                  Constant(value='均等'),
                  Constant(value='カスタム')],
                ctx=Load())],
            keywords=[
              keyword(
                arg='horizontal',
                value=Constant(value=True)),
              keyword(
                arg='index',
                value=Constant(value=0))])),
        Assign(
          targets=[
            Name(id='default_uniform', ctx=Store())],
          value=BinOp(
            left=Constant(value=100.0),
            op=Div(),
            right=Call(
              func=Name(id='len', ctx=Load()),
              args=[
                Name(id='SETTING_KEYS', ctx=Load())]))),
        AnnAssign(
          target=Name(id='prior_inputs', ctx=Store()),
          annotation=Subscript(
            value=Name(id='Dict', ctx=Load()),
            slice=Tuple(
              elts=[
                Name(id='str', ctx=Load()),
                Name(id='float', ctx=Load())],
              ctx=Load()),
            ctx=Load()),
          value=DictComp(
            key=Name(id='k', ctx=Load()),
            value=Name(id='default_uniform', ctx=Load()),
            generators=[
              comprehension(
                target=Name(id='k', ctx=Store()),
                iter=Name(id='SETTING_KEYS', ctx=Load()),
                is_async=0)]),
          simple=1),
        If(
          test=Compare(
            left=Name(id='prior_mode', ctx=Load()),
            ops=[
              Eq()],
            comparators=[
              Constant(value='カスタム')]),
          body=[
            With(
              items=[
                withitem(
                  context_expr=Call(
                    func=Attribute(
                      value=Name(id='st', ctx=Load()),
                      attr='expander',
                      ctx=Load()),
                    args=[
                      Constant(value='事前確率を細かく指定')],
                    keywords=[
                      keyword(
                        arg='expanded',
                        value=Constant(value=True))]))],
              body=[
                Assign(
                  targets=[
                    Name(id='cols', ctx=Store())],
                  value=Call(
                    func=Attribute(
                      value=Name(id='st', ctx=Load()),
                      attr='columns',
                      ctx=Load()),
                    args=[
                      Call(
                        func=Name(id='len', ctx=Load()),
                        args=[
                          Name(id='SETTING_KEYS', ctx=Load())])])),
                For(
                  target=Tuple(
                    elts=[
                      Name(id='idx', ctx=Store()),
                      Name(id='key', ctx=Store())],
                    ctx=Store()),
                  iter=Call(
                    func=Name(id='enumerate', ctx=Load()),
                    args=[
                      Name(id='SETTING_KEYS', ctx=Load())]),
                  body=[
                    With(
                      items=[
                        withitem(
                          context_expr=Subscript(
                            value=Name(id='cols', ctx=Load()),
                            slice=Name(id='idx', ctx=Load()),
                            ctx=Load()))],
                      body=[
                        Assign(
                          targets=[
                            Subscript(
                              value=Name(id='prior_inputs', ctx=Load()),
                              slice=Name(id='key', ctx=Load()),
                              ctx=Store())],
                          value=Call(
                            func=Attribute(
                              value=Name(id='st', ctx=Load()),
                              attr='number_input',
                              ctx=Load()),
                            args=[
                              JoinedStr(
                                values=[
                                  Constant(value='設定 '),
                                  FormattedValue(
                                    value=Name(id='key', ctx=Load()),
                                    conversion=-1)])],
                            keywords=[
                              keyword(
                                arg='min_value',
                                value=Constant(value=0.0)),
                              keyword(
                                arg='value',
                                value=Call(
                                  func=Name(id='float', ctx=Load()),
                                  args=[
                                    JoinedStr(
                                      values=[
                                        FormattedValue(
                                          value=Name(id='default_uniform', ctx=Load()),
                                          conversion=-1,
                                          format_spec=JoinedStr(
                                            values=[
                                              Constant(value='.1f')]))])])),
                              keyword(
                                arg='step',
                                value=Constant(value=0.1)),
                              keyword(
                                arg='key',
                                value=JoinedStr(
                                  values=[
                                    Constant(value='prior_'),
                                    FormattedValue(
                                      value=Name(id='key', ctx=Load()),
                                      conversion=-1)]))]))])])])]),
        Assign(
          targets=[
            Name(id='submitted', ctx=Store())],
          value=Call(
            func=Attribute(
              value=Name(id='st', ctx=Load()),
              attr='form_submit_button',
              ctx=Load()),
            args=[
              Constant(value='計算する')],
            keywords=[
              keyword(
                arg='use_container_width',
                value=Constant(value=True))]))]),
    If(
      test=Name(id='submitted', ctx=Load()),
      body=[
        Assign(
          targets=[
            Attribute(
              value=Attribute(
                value=Name(id='st', ctx=Load()),
                attr='session_state',
                ctx=Load()),
              attr='n',
              ctx=Store())],
          value=Call(
            func=Name(id='int', ctx=Load()),
            args=[
              Name(id='n', ctx=Load())])),
        Assign(
          targets=[
            Attribute(
              value=Attribute(
                value=Name(id='st', ctx=Load()),
                attr='session_state',
                ctx=Load()),
              attr='k',
              ctx=Store())],
          value=Call(
            func=Name(id='int', ctx=Load()),
            args=[
              Name(id='k', ctx=Load())])),
        If(
          test=Compare(
            left=Attribute(
              value=Attribute(
                value=Name(id='st', ctx=Load()),
                attr='session_state',
                ctx=Load()),
              attr='k',
              ctx=Load()),
            ops=[
              Gt()],
            comparators=[
              Attribute(
                value=Attribute(
                  value=Name(id='st', ctx=Load()),
                  attr='session_state',
                  ctx=Load()),
                attr='n',
                ctx=Load())]),
          body=[
            Expr(
              value=Call(
                func=Attribute(
                  value=Name(id='st', ctx=Load()),
                  attr='error',
                  ctx=Load()),
                args=[
                  Constant(value='入力エラー: 0 <= 小役回数 <= 回転数 を満たしてください。')])),
            Expr(
              value=Call(
                func=Attribute(
                  value=Name(id='st', ctx=Load()),
                  attr='stop',
                  ctx=Load())))]),
        Assign(
          targets=[
            Name(id='priors', ctx=Store())],
          value=Name(id='prior_inputs', ctx=Load())),
        Assign(
          targets=[
            Name(id='posteriors', ctx=Store())],
          value=Call(
            func=Name(id='compute_posteriors', ctx=Load()),
            args=[
              Call(
                func=Name(id='int', ctx=Load()),
                args=[
                  Attribute(
                    value=Attribute(
                      value=Name(id='st', ctx=Load()),
                      attr='session_state',
                      ctx=Load()),
                    attr='n',
                    ctx=Load())]),
              Call(
                func=Name(id='int', ctx=Load()),
                args=[
                  Attribute(
                    value=Attribute(
                      value=Name(id='st', ctx=Load()),
                      attr='session_state',
                      ctx=Load()),
                    attr='k',
                    ctx=Load())]),
              Name(id='priors', ctx=Load())])),
        Assign(
          targets=[
            Name(id='priors_norm', ctx=Store())],
          value=Call(
            func=Name(id='normalize', ctx=Load()),
            args=[
              Name(id='priors', ctx=Load())])),
        Assign(
          targets=[
            Name(id='top_key', ctx=Store())],
          value=Call(
            func=Name(id='max', ctx=Load()),
            args=[
              Name(id='posteriors', ctx=Load())],
            keywords=[
              keyword(
                arg='key',
                value=Attribute(
                  value=Name(id='posteriors', ctx=Load()),
                  attr='get',
                  ctx=Load()))])),
        Assign(
          targets=[
            Name(id='top_prob', ctx=Store())],
          value=BinOp(
            left=Subscript(
              value=Name(id='posteriors', ctx=Load()),
              slice=Name(id='top_key', ctx=Load()),
              ctx=Load()),
            op=Mult(),
            right=Constant(value=100.0))),
        Assign(
          targets=[
            Tuple(
              elts=[
                Name(id='c1', ctx=Store()),
                Name(id='c2', ctx=Store())],
              ctx=Store())],
          value=Call(
            func=Attribute(
              value=Name(id='st', ctx=Load()),
              attr='columns',
              ctx=Load()),
            args=[
              Constant(value=2)])),
        With(
          items=[
            withitem(
              context_expr=Name(id='c1', ctx=Load()))],
          body=[
            Expr(
              value=Call(
                func=Attribute(
                  value=Name(id='st', ctx=Load()),
                  attr='metric',
                  ctx=Load()),
                keywords=[
                  keyword(
                    arg='label',
                    value=Constant(value='最有力の設定')),
                  keyword(
                    arg='value',
                    value=JoinedStr(
                      values=[
                        Constant(value='設定 '),
                        FormattedValue(
                          value=Name(id='top_key', ctx=Load()),
                          conversion=-1)])),
                  keyword(
                    arg='delta',
                    value=JoinedStr(
                      values=[
                        FormattedValue(
                          value=Name(id='top_prob', ctx=Load()),
                          conversion=-1,
                          format_spec=JoinedStr(
                            values=[
                              Constant(value='.2f')])),
                        Constant(value='%')]))]))]),
        With(
          items=[
            withitem(
              context_expr=Name(id='c2', ctx=Load()))],
          body=[
            Assign(
              targets=[
                Name(id='low_prob', ctx=Store())],
              value=BinOp(
                left=Call(
                  func=Name(id='sum', ctx=Load()),
                  args=[
                    GeneratorExp(
                      elt=Call(
                        func=Attribute(
                          value=Name(id='posteriors', ctx=Load()),
                          attr='get',
                          ctx=Load()),
                        args=[
                          Name(id='k', ctx=Load()),
                          Constant(value=0.0)]),
                      generators=[
                        comprehension(
                          target=Name(id='k', ctx=Store()),
                          iter=List(
                            elts=[
                              Constant(value='1'),
                              Constant(value='2')],
                            ctx=Load()),
                          is_async=0)])]),
                op=Mult(),
                right=Constant(value=100.0))),
            Assign(
              targets=[
                Name(id='high_prob', ctx=Store())],
              value=BinOp(
                left=Call(
                  func=Name(id='sum', ctx=Load()),
                  args=[
                    GeneratorExp(
                      elt=Call(
                        func=Attribute(
                          value=Name(id='posteriors', ctx=Load()),
                          attr='get',
                          ctx=Load()),
                        args=[
                          Name(id='k', ctx=Load()),
                          Constant(value=0.0)]),
                      generators=[
                        comprehension(
                          target=Name(id='k', ctx=Store()),
                          iter=List(
                            elts=[
                              Constant(value='4'),
                              Constant(value='5'),
                              Constant(value='6')],
                            ctx=Load()),
                          is_async=0)])]),
                op=Mult(),
                right=Constant(value=100.0))),
            Expr(
              value=Call(
                func=Attribute(
                  value=Name(id='st', ctx=Load()),
                  attr='metric',
                  ctx=Load()),
                keywords=[
                  keyword(
                    arg='label',
                    value=Constant(value='低(1,2) / 高(4,5,6)')),
                  keyword(
                    arg='value',
                    value=JoinedStr(
                      values=[
                        FormattedValue(
                          value=Name(id='low_prob', ctx=Load()),
                          conversion=-1,
                          format_spec=JoinedStr(
                            values=[
                              Constant(value='.2f')])),
                        Constant(value='% / '),
                        FormattedValue(
                          value=Name(id='high_prob', ctx=Load()),
                          conversion=-1,
                          format_spec=JoinedStr(
                            values=[
                              Constant(value='.2f')])),
                        Constant(value='%')]))])),
            Assign(
              targets=[
                Name(id='grp124', ctx=Store())],
              value=BinOp(
                left=BinOp(
                  left=BinOp(
                    left=Call(
                      func=Attribute(
                        value=Name(id='posteriors', ctx=Load()),
                        attr='get',
                        ctx=Load()),
                      args=[
                        Constant(value='1'),
                        Constant(value=0.0)]),
                    op=Add(),
                    right=Call(
                      func=Attribute(
                        value=Name(id='posteriors', ctx=Load()),
                        attr='get',
                        ctx=Load()),
                      args=[
                        Constant(value='2'),
                        Constant(value=0.0)])),
                  op=Add(),
                  right=Call(
                    func=Attribute(
                      value=Name(id='posteriors', ctx=Load()),
                      attr='get',
                      ctx=Load()),
                    args=[
                      Constant(value='4'),
                      Constant(value=0.0)])),
                op=Mult(),
                right=Constant(value=100.0))),
            Assign(
              targets=[
                Name(id='grp56', ctx=Store())],
              value=BinOp(
                left=BinOp(
                  left=Call(
                    func=Attribute(
                      value=Name(id='posteriors', ctx=Load()),
                      attr='get',
                      ctx=Load()),
                    args=[
                      Constant(value='5'),
                      Constant(value=0.0)]),
                  op=Add(),
                  right=Call(
                    func=Attribute(
                      value=Name(id='posteriors', ctx=Load()),
                      attr='get',
                      ctx=Load()),
                    args=[
                      Constant(value='6'),
                      Constant(value=0.0)])),
                op=Mult(),
                right=Constant(value=100.0))),
            Expr(
              value=Call(
                func=Attribute(
                  value=Name(id='st', ctx=Load()),
                  attr='metric',
                  ctx=Load()),
                keywords=[
                  keyword(
                    arg='label',
                    value=Constant(value='(1,2,4) / (5,6)')),
                  keyword(
                    arg='value',
                    value=JoinedStr(
                      values=[
                        FormattedValue(
                          value=Name(id='grp124', ctx=Load()),
                          conversion=-1,
                          format_spec=JoinedStr(
                            values=[
                              Constant(value='.2f')])),
                        Constant(value='% / '),
                        FormattedValue(
                          value=Name(id='grp56', ctx=Load()),
                          conversion=-1,
                          format_spec=JoinedStr(
                            values=[
                              Constant(value='.2f')])),
                        Constant(value='%')]))]))]),
        Assign(
          targets=[
            Name(id='chart_data', ctx=Store())],
          value=Call(
            func=Attribute(
              value=Name(id='pd', ctx=Load()),
              attr='DataFrame',
              ctx=Load()),
            args=[
              Dict(
                keys=[
                  Constant(value='設定'),
                  Constant(value='事後(%)')],
                values=[
                  Name(id='SETTING_KEYS', ctx=Load()),
                  ListComp(
                    elt=BinOp(
                      left=Subscript(
                        value=Name(id='posteriors', ctx=Load()),
                        slice=Name(id='k', ctx=Load()),
                        ctx=Load()),
                      op=Mult(),
                      right=Constant(value=100.0)),
                    generators=[
                      comprehension(
                        target=Name(id='k', ctx=Store()),
                        iter=Name(id='SETTING_KEYS', ctx=Load()),
                        is_async=0)])])])),
        Assign(
          targets=[
            Name(id='chart', ctx=Store())],
          value=Call(
            func=Attribute(
              value=Call(
                func=Attribute(
                  value=Call(
                    func=Attribute(
                      value=Call(
                        func=Attribute(
                          value=Name(id='alt', ctx=Load()),
                          attr='Chart',
                          ctx=Load()),
                        args=[
                          Name(id='chart_data', ctx=Load())]),
                      attr='mark_bar',
                      ctx=Load()),
                    keywords=[
                      keyword(
                        arg='size',
                        value=Constant(value=36)),
                      keyword(
                        arg='cornerRadiusTopLeft',
                        value=Constant(value=3)),
                      keyword(
                        arg='cornerRadiusTopRight',
                        value=Constant(value=3))]),
                  attr='encode',
                  ctx=Load()),
                keywords=[
                  keyword(
                    arg='x',
                    value=Call(
                      func=Attribute(
                        value=Name(id='alt', ctx=Load()),
                        attr='X',
                        ctx=Load()),
                      args=[
                        Constant(value='設定:N')],
                      keywords=[
                        keyword(
                          arg='sort',
                          value=Name(id='SETTING_KEYS', ctx=Load())),
                        keyword(
                          arg='axis',
                          value=Call(
                            func=Attribute(
                              value=Name(id='alt', ctx=Load()),
                              attr='Axis',
                              ctx=Load()),
                            keywords=[
                              keyword(
                                arg='title',
                                value=Constant(value=None))]))])),
                  keyword(
                    arg='y',
                    value=Call(
                      func=Attribute(
                        value=Name(id='alt', ctx=Load()),
                        attr='Y',
                        ctx=Load()),
                      args=[
                        Constant(value='事後(%):Q')],
                      keywords=[
                        keyword(
                          arg='axis',
                          value=Call(
                            func=Attribute(
                              value=Name(id='alt', ctx=Load()),
                              attr='Axis',
                              ctx=Load()),
                            keywords=[
                              keyword(
                                arg='title',
                                value=Constant(value=None))]))])),
                  keyword(
                    arg='color',
                    value=Call(
                      func=Attribute(
                        value=Name(id='alt', ctx=Load()),
                        attr='condition',
                        ctx=Load()),
                      args=[
                        Compare(
                          left=Attribute(
                            value=Attribute(
                              value=Name(id='alt', ctx=Load()),
                              attr='datum',
                              ctx=Load()),
                            attr='設定',
                            ctx=Load()),
                          ops=[
                            Eq()],
                          comparators=[
                            Name(id='top_key', ctx=Load())]),
                        Call(
                          func=Attribute(
                            value=Name(id='alt', ctx=Load()),
                            attr='value',
                            ctx=Load()),
                          args=[
                            Constant(value='#E74C3C')]),
                        Call(
                          func=Attribute(
                            value=Name(id='alt', ctx=Load()),
                            attr='value',
                            ctx=Load()),
                          args=[
                            Constant(value='#2F80ED')])])),
                  keyword(
                    arg='tooltip',
                    value=List(
                      elts=[
                        Call(
                          func=Attribute(
                            value=Name(id='alt', ctx=Load()),
                            attr='Tooltip',
                            ctx=Load()),
                          args=[
                            Constant(value='設定:N')]),
                        Call(
                          func=Attribute(
                            value=Name(id='alt', ctx=Load()),
                            attr='Tooltip',
                            ctx=Load()),
                          args=[
                            Constant(value='事後(%):Q')],
                          keywords=[
                            keyword(
                              arg='format',
                              value=Constant(value='.2f'))])],
                      ctx=Load()))]),
              attr='properties',
              ctx=Load()),
            keywords=[
              keyword(
                arg='height',
                value=Constant(value=260))])),
        Expr(
          value=Call(
            func=Attribute(
              value=Name(id='st', ctx=Load()),
              attr='altair_chart',
              ctx=Load()),
            args=[
              Name(id='chart', ctx=Load())],
            keywords=[
              keyword(
                arg='use_container_width',
                value=Constant(value=True))])),
        Assign(
          targets=[
            Name(id='rows', ctx=Store())],
          value=List(ctx=Load())),
        For(
          target=Name(id='key', ctx=Store()),
          iter=Name(id='SETTING_KEYS', ctx=Load()),
          body=[
            Assign(
              targets=[
                Name(id='p', ctx=Store())],
              value=Subscript(
                value=Name(id='SETTINGS', ctx=Load()),
                slice=Name(id='key', ctx=Load()),
                ctx=Load())),
            Expr(
              value=Call(
                func=Attribute(
                  value=Name(id='rows', ctx=Load()),
                  attr='append',
                  ctx=Load()),
                args=[
                  Dict(
                    keys=[
                      Constant(value='設定'),
                      Constant(value='理論(1/x)'),
                      Constant(value='事前(%)'),
                      Constant(value='事後(%)')],
                    values=[
                      Name(id='key', ctx=Load()),
                      Call(
                        func=Name(id='round', ctx=Load()),
                        args=[
                          BinOp(
                            left=Constant(value=1.0),
                            op=Div(),
                            right=Name(id='p', ctx=Load())),
                          Constant(value=2)]),
                      Call(
                        func=Name(id='round', ctx=Load()),
                        args=[
                          BinOp(
                            left=Subscript(
                              value=Name(id='priors_norm', ctx=Load()),
                              slice=Name(id='key', ctx=Load()),
                              ctx=Load()),
                            op=Mult(),
                            right=Constant(value=100.0)),
                          Constant(value=2)]),
                      Call(
                        func=Name(id='round', ctx=Load()),
                        args=[
                          BinOp(
                            left=Subscript(
                              value=Name(id='posteriors', ctx=Load()),
                              slice=Name(id='key', ctx=Load()),
                              ctx=Load()),
                            op=Mult(),
                            right=Constant(value=100.0)),
                          Constant(value=2)])])]))]),
        Assign(
          targets=[
            Name(id='df', ctx=Store())],
          value=Call(
            func=Attribute(
              value=Name(id='pd', ctx=Load()),
              attr='DataFrame',
              ctx=Load()),
            args=[
              Name(id='rows', ctx=Load())])),
        Expr(
          value=Call(
            func=Attribute(
              value=Name(id='st', ctx=Load()),
              attr='dataframe',
              ctx=Load()),
            args=[
              Name(id='df', ctx=Load())],
            keywords=[
              keyword(
                arg='use_container_width',
                value=Constant(value=True)),
              keyword(
                arg='hide_index',
                value=Constant(value=True))]))],
      orelse=[
        Expr(
          value=Call(
            func=Attribute(
              value=Name(id='st', ctx=Load()),
              attr='info',
              ctx=Load()),
            args=[
              Constant(value='フォームに入力して『計算する』を押してください。事前確率はデフォルトで均等配分です。')]))])])